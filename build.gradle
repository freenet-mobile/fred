buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        classpath files('gradle/gradle-witness.jar')
    }
}

configurations {
    provided
    compile
}

apply plugin: 'witness'
apply plugin: 'java'
apply plugin: 'maven-publish'

repositories {
    mavenLocal() // TODO: use lib/ instead?
    maven { url 'https://mvn.freenetproject.org' }
    jcenter()
    maven { url 'https://jitpack.io' }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
}

def version_buildir = "$projectDir/build/tmp/compileVersion/"
def version_src = 'freenet/node/Version.java'

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
    test {
        java {
            srcDir 'test/'
        }
    }
}

def gitrev
task buildInfo {
    try {
        def cmd = "git describe --always --abbrev=4 --dirty"
        def proc = cmd.execute()
        gitrev = proc.text.trim()
    } catch (java.io.IOException e) {
        gitrev = "@unknown@"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}

task compileVersion (type: JavaCompile) {
    copy {
        from sourceSets.main.java.srcDirs
        into "${version_buildir}"
        include "${version_src}"
        filter {
            String line -> line.replaceAll("@custom@","${gitrev}")
        }
    }
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${buildDir}/java/version/")
}
compileVersion.dependsOn buildInfo
compileVersion.dependsOn compileJava
processResources.dependsOn compileVersion

task jar (type: Jar, overwrite: true) {
    from (compileVersion) {
        include 'freenet/node/Version**class'
    }
    from ("${buildDir}/classes/java/main/") {
        exclude 'freenet/node/Version.class'
        exclude 'freenet/node/Version$1.class'
    }
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = "warn"
    archivesBaseName = "freenet"
    manifest {
        attributes("Permissions": "all-permissions")
        attributes("Application-Name": "Freenet REference Daemon")
        attributes("Required-Ext-Version": 29)
        attributes("Recommended-Ext-Version": 29)
        attributes("Compiled-With": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})")
        attributes([
                       "Specification-Title": "Freenet",
                       "Specification-Version": "0.7.5",
                       "Specification-Vendor": "freenetproject.org",
                       "Implementation-Title": "Freenet",
                       "Implementation-Version": "0.7.5 ${gitrev}",
                       "Implementation-Vendor": "freenetproject.org",
                   ], "common")
    }
}
jar.dependsOn processResources

def jars = []
gradle.addListener(new TaskExecutionListener() {
void afterExecute(Task task, TaskState state) {
    if(task in AbstractArchiveTask) {
        jars << task.outputs.files.singleFile
    }
}

void beforeExecute(Task task) { }
})
gradle.addBuildListener(new BuildAdapter() {
    void buildFinished(BuildResult result) {
        if(jars) {
            def hash = {
                File file -> def sha256 = java.security.MessageDigest.getInstance('SHA-256')
                file.eachByte(1024 * 4) { buffer, len -> sha256.update(buffer, 0, len) }
                println "SHA-256 of ${file.name}: ${sha256.digest().encodeHex().toString()}"
            }

            jars.each { hash(it) }
        }
    }
})

task copyResourcesToClasses2 {
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into sourceSets.main.output.classesDir
            include 'freenet/l10n/*properties'
            include 'freenet/l10n/iso-*.tab'
            include 'freenet/clients/http/staticfiles/**'
            include '../dependencies.properties'
        }
        copy {
            from "${projectDir}/"
            into sourceSets.main.output.classesDir
            include 'dependencies.properties'
        }
    }
}
processResources.dependsOn copyResourcesToClasses2

task copyTestResourcesToClasses2 {
    inputs.dir sourceSets.test.java.srcDirs
    outputs.dir sourceSets.test.output.classesDir
    doLast {
        copy {
	    from sourceSets.test.java.srcDirs
	    into sourceSets.test.output.classesDir
            include 'freenet/client/filter/*/**'
            include 'freenet/crypt/ciphers/rijndael-gladman-test-data/**'
            include 'freenet/l10n/*properties'
        }
    }
}
compileTestJava.dependsOn copyResourcesToClasses2
compileTestJava.dependsOn copyTestResourcesToClasses2

test {
    minHeapSize = "128m"
    maxHeapSize = "512m"
    // no inner class
    include 'freenet/**/*Test.class'
    exclude 'freenet/**/*$*Test.class'
    workingDir = sourceSets.test.output.classesDir
    scanForTestClasses = false
    systemProperties += [
        "test.l10npath_test": "freenet/l10n/",
        "test.l10npath_main": "../main/freenet/l10n/"
//	"test.extensive":
//	"test.verbose":
//	"test.benchmark":
    ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.freenetproject'
            artifactId "fred"
            version gitrev
            from components.java
        }
    }
    repositories {
        maven {
            url "s3://mvn.freenetproject.org/"
            credentials(AwsCredentials) {
                accessKey System.getenv('AWS_ACCESS_KEY_ID')
                secretKey System.getenv('AWS_SECRET_ACCESS_KEY')
            }
        }
    }
}

task copyRuntimeLibs(type: Copy) {
    into "${buildDir}/output/"
    from configurations.runtime
    from jar
}
copyRuntimeLibs.dependsOn jar

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "org.bouncycastle:bcprov-jdk15on:1.59"
    implementation "net.java.dev.jna:jna:4.5.2"
    implementation "net.java.dev.jna:jna-platform:4.5.2"
    compile "org.apache.commons:commons-compress:1.4.1"
    compile "tanukisoft:wrapper:3.2.3"

    compile 'com.github.freenet-mobile:onion-common:0.0.3'
    compile 'com.github.freenet-mobile:onion-fec:0.0.4'

    compile 'com.github.freenet-mobile:mantissa:0.0.3'

    compile "org.b1.pack:lzma-sdk-4j:9.22.0"
    compile "com.github.freenet-mobile:lzmajio:0.95.4"

    compile "com.github.freenet-mobile:bitcollider-core:0.0.3"

    compile 'com.github.freenet-mobile:freenet-ext:0.60.3'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

dependencyVerification {
    // testCompile includes all of compile deps... so let's include only these
    includedConfigurations = [configurations.testCompile]

    verify = [
        'org.bouncycastle:bcprov-jdk15on:1c31e44e331d25e46d293b3e8ee2d07028a67db011e74cb2443285aed1d59c85',
        'org.apache.commons:commons-compress:28a00d80716f073d644b9da76e94b5e8ff94de8e9323f06f558fba653fcf5f86',
        'tanukisoft:wrapper:54de7b6be77955fe54821efc28fcab2bd195cc2aabfceb29d608c12206a57918',
        'com.github.freenet-mobile:onion-fec:7f68d901b4d92ac31b8edf51710381a8de7285257b5adeb88f40a52006a9bd2b',
        'com.github.freenet-mobile:onion-common:df03d4b60f77c0d89bb5250fe86d928b9d2c75efccca314fc5fef55e6c42b1dc',
        'com.github.freenet-mobile:mantissa:69fc4837e43ad7ca0298e547791889659ac41b119ea6545b8f436f48119bbd02',
        'com.github.freenet-mobile:lzmajio:16a87b7f14e7c810de585093314164990346fabeab95d0c8ca9e7e149129c671',
        'org.b1.pack:lzma-sdk-4j:6da258d8fecc5359a95922b236166d903146f589e3c806856124008c78596d55',
        'com.github.freenet-mobile:bitcollider-core:a96da4f57749608c7c7fe4b8288388b08a3ad51f3b8177cdac47f2405db91a23',
        'com.github.freenet-mobile:freenet-ext:413772f55eac72d39aae8bc20300e810249147d930f817c24434efcddba728ac',
        'junit:junit:59721f0805e223d84b90677887d9ff567dc534d7c502ca903c0c2b17f05c116a',
        'org.mockito:mockito-core:f97483ba0944b9fa133aa29638764ddbeadb51ec3dbc02074c58fa2caecd07fa',
        'org.hamcrest:hamcrest-library:711d64522f9ec410983bd310934296da134be4254a125080a0416ec178dfad1c',
        'org.tukaani:xz:7eafdc8880da10286c2398fa42e3bf68c3e845c35ae7a6ae67f5cc1fa16c7405',
        'org.hamcrest:hamcrest-core:66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9',
        'org.objenesis:objenesis:c5694b55d92527479382f254199b3c6b1d8780f652ad61e9ca59919887f491a8',
    ]
}

task tar(type: Tar) {
  description = "Build a source release, specifically excluding the build directories and gradle wrapper files"
  compression = Compression.BZIP2

  baseName = "freenet-sources"

  from(project.rootDir) {
    exclude '**/build'
    exclude 'build'
    exclude '.gradle'
  }

  into(baseName)

  preserveFileTimestamps = false
  reproducibleFileOrder = true

  // Set destination directory.
  destinationDir = file("${project.buildDir}")

  archiveName = "${baseName}.tgz"
  doLast { // generate md5 checksum
    ant.checksum file:"$destinationDir/$archiveName"
  }
}

javadoc << {
    failOnError false
}
